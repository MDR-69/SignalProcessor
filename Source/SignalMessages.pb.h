// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignalMessages.proto

#ifndef PROTOBUF_SignalMessages_2eproto__INCLUDED
#define PROTOBUF_SignalMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SignalMessages_2eproto();
void protobuf_AssignDesc_SignalMessages_2eproto();
void protobuf_ShutdownFile_SignalMessages_2eproto();

class SignalLevel;
class SignalInstantVal;
class Impulse;
class LinearFFT;
class LogFFT;
class TimeInfo;

// ===================================================================

class SignalLevel : public ::google_public::protobuf::Message {
 public:
  SignalLevel();
  virtual ~SignalLevel();

  SignalLevel(const SignalLevel& from);

  inline SignalLevel& operator=(const SignalLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SignalLevel& default_instance();

  void Swap(SignalLevel* other);

  // implements Message ----------------------------------------------

  SignalLevel* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SignalLevel& from);
  void MergeFrom(const SignalLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 signalID = 1 [default = 1];
  inline bool has_signalid() const;
  inline void clear_signalid();
  static const int kSignalIDFieldNumber = 1;
  inline ::google_public::protobuf::int32 signalid() const;
  inline void set_signalid(::google_public::protobuf::int32 value);

  // required float signalLevel = 2 [default = 0];
  inline bool has_signallevel() const;
  inline void clear_signallevel();
  static const int kSignalLevelFieldNumber = 2;
  inline float signallevel() const;
  inline void set_signallevel(float value);

  // @@protoc_insertion_point(class_scope:SignalLevel)
 private:
  inline void set_has_signalid();
  inline void clear_has_signalid();
  inline void set_has_signallevel();
  inline void clear_has_signallevel();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::int32 signalid_;
  float signallevel_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SignalMessages_2eproto();
  friend void protobuf_AssignDesc_SignalMessages_2eproto();
  friend void protobuf_ShutdownFile_SignalMessages_2eproto();

  void InitAsDefaultInstance();
  static SignalLevel* default_instance_;
};
// -------------------------------------------------------------------

class SignalInstantVal : public ::google_public::protobuf::Message {
 public:
  SignalInstantVal();
  virtual ~SignalInstantVal();

  SignalInstantVal(const SignalInstantVal& from);

  inline SignalInstantVal& operator=(const SignalInstantVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SignalInstantVal& default_instance();

  void Swap(SignalInstantVal* other);

  // implements Message ----------------------------------------------

  SignalInstantVal* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SignalInstantVal& from);
  void MergeFrom(const SignalInstantVal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 signalID = 1 [default = 1];
  inline bool has_signalid() const;
  inline void clear_signalid();
  static const int kSignalIDFieldNumber = 1;
  inline ::google_public::protobuf::int32 signalid() const;
  inline void set_signalid(::google_public::protobuf::int32 value);

  // required float signalInstantVal = 2 [default = 0];
  inline bool has_signalinstantval() const;
  inline void clear_signalinstantval();
  static const int kSignalInstantValFieldNumber = 2;
  inline float signalinstantval() const;
  inline void set_signalinstantval(float value);

  // @@protoc_insertion_point(class_scope:SignalInstantVal)
 private:
  inline void set_has_signalid();
  inline void clear_has_signalid();
  inline void set_has_signalinstantval();
  inline void clear_has_signalinstantval();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::int32 signalid_;
  float signalinstantval_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SignalMessages_2eproto();
  friend void protobuf_AssignDesc_SignalMessages_2eproto();
  friend void protobuf_ShutdownFile_SignalMessages_2eproto();

  void InitAsDefaultInstance();
  static SignalInstantVal* default_instance_;
};
// -------------------------------------------------------------------

class Impulse : public ::google_public::protobuf::Message {
 public:
  Impulse();
  virtual ~Impulse();

  Impulse(const Impulse& from);

  inline Impulse& operator=(const Impulse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const Impulse& default_instance();

  void Swap(Impulse* other);

  // implements Message ----------------------------------------------

  Impulse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const Impulse& from);
  void MergeFrom(const Impulse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 signalID = 1 [default = 1];
  inline bool has_signalid() const;
  inline void clear_signalid();
  static const int kSignalIDFieldNumber = 1;
  inline ::google_public::protobuf::int32 signalid() const;
  inline void set_signalid(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Impulse)
 private:
  inline void set_has_signalid();
  inline void clear_has_signalid();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::int32 signalid_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SignalMessages_2eproto();
  friend void protobuf_AssignDesc_SignalMessages_2eproto();
  friend void protobuf_ShutdownFile_SignalMessages_2eproto();

  void InitAsDefaultInstance();
  static Impulse* default_instance_;
};
// -------------------------------------------------------------------

class LinearFFT : public ::google_public::protobuf::Message {
 public:
  LinearFFT();
  virtual ~LinearFFT();

  LinearFFT(const LinearFFT& from);

  inline LinearFFT& operator=(const LinearFFT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const LinearFFT& default_instance();

  void Swap(LinearFFT* other);

  // implements Message ----------------------------------------------

  LinearFFT* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const LinearFFT& from);
  void MergeFrom(const LinearFFT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 signalID = 1 [default = 1];
  inline bool has_signalid() const;
  inline void clear_signalid();
  static const int kSignalIDFieldNumber = 1;
  inline ::google_public::protobuf::int32 signalid() const;
  inline void set_signalid(::google_public::protobuf::int32 value);

  // required float fundamentalFreq = 2 [default = 0];
  inline bool has_fundamentalfreq() const;
  inline void clear_fundamentalfreq();
  static const int kFundamentalFreqFieldNumber = 2;
  inline float fundamentalfreq() const;
  inline void set_fundamentalfreq(float value);

  // repeated float data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google_public::protobuf::RepeatedField< float >&
      data() const;
  inline ::google_public::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:LinearFFT)
 private:
  inline void set_has_signalid();
  inline void clear_has_signalid();
  inline void set_has_fundamentalfreq();
  inline void clear_has_fundamentalfreq();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::int32 signalid_;
  float fundamentalfreq_;
  ::google_public::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SignalMessages_2eproto();
  friend void protobuf_AssignDesc_SignalMessages_2eproto();
  friend void protobuf_ShutdownFile_SignalMessages_2eproto();

  void InitAsDefaultInstance();
  static LinearFFT* default_instance_;
};
// -------------------------------------------------------------------

class LogFFT : public ::google_public::protobuf::Message {
 public:
  LogFFT();
  virtual ~LogFFT();

  LogFFT(const LogFFT& from);

  inline LogFFT& operator=(const LogFFT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const LogFFT& default_instance();

  void Swap(LogFFT* other);

  // implements Message ----------------------------------------------

  LogFFT* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const LogFFT& from);
  void MergeFrom(const LogFFT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 signalID = 1 [default = 1];
  inline bool has_signalid() const;
  inline void clear_signalid();
  static const int kSignalIDFieldNumber = 1;
  inline ::google_public::protobuf::int32 signalid() const;
  inline void set_signalid(::google_public::protobuf::int32 value);

  // optional float fundamentalFreq = 2;
  inline bool has_fundamentalfreq() const;
  inline void clear_fundamentalfreq();
  static const int kFundamentalFreqFieldNumber = 2;
  inline float fundamentalfreq() const;
  inline void set_fundamentalfreq(float value);

  // optional float band1 = 3;
  inline bool has_band1() const;
  inline void clear_band1();
  static const int kBand1FieldNumber = 3;
  inline float band1() const;
  inline void set_band1(float value);

  // optional float band2 = 4;
  inline bool has_band2() const;
  inline void clear_band2();
  static const int kBand2FieldNumber = 4;
  inline float band2() const;
  inline void set_band2(float value);

  // optional float band3 = 5;
  inline bool has_band3() const;
  inline void clear_band3();
  static const int kBand3FieldNumber = 5;
  inline float band3() const;
  inline void set_band3(float value);

  // optional float band4 = 6;
  inline bool has_band4() const;
  inline void clear_band4();
  static const int kBand4FieldNumber = 6;
  inline float band4() const;
  inline void set_band4(float value);

  // optional float band5 = 7;
  inline bool has_band5() const;
  inline void clear_band5();
  static const int kBand5FieldNumber = 7;
  inline float band5() const;
  inline void set_band5(float value);

  // optional float band6 = 8;
  inline bool has_band6() const;
  inline void clear_band6();
  static const int kBand6FieldNumber = 8;
  inline float band6() const;
  inline void set_band6(float value);

  // optional float band7 = 9;
  inline bool has_band7() const;
  inline void clear_band7();
  static const int kBand7FieldNumber = 9;
  inline float band7() const;
  inline void set_band7(float value);

  // optional float band8 = 10;
  inline bool has_band8() const;
  inline void clear_band8();
  static const int kBand8FieldNumber = 10;
  inline float band8() const;
  inline void set_band8(float value);

  // optional float band9 = 11;
  inline bool has_band9() const;
  inline void clear_band9();
  static const int kBand9FieldNumber = 11;
  inline float band9() const;
  inline void set_band9(float value);

  // optional float band10 = 12;
  inline bool has_band10() const;
  inline void clear_band10();
  static const int kBand10FieldNumber = 12;
  inline float band10() const;
  inline void set_band10(float value);

  // optional float band11 = 13;
  inline bool has_band11() const;
  inline void clear_band11();
  static const int kBand11FieldNumber = 13;
  inline float band11() const;
  inline void set_band11(float value);

  // optional float band12 = 14;
  inline bool has_band12() const;
  inline void clear_band12();
  static const int kBand12FieldNumber = 14;
  inline float band12() const;
  inline void set_band12(float value);

  // @@protoc_insertion_point(class_scope:LogFFT)
 private:
  inline void set_has_signalid();
  inline void clear_has_signalid();
  inline void set_has_fundamentalfreq();
  inline void clear_has_fundamentalfreq();
  inline void set_has_band1();
  inline void clear_has_band1();
  inline void set_has_band2();
  inline void clear_has_band2();
  inline void set_has_band3();
  inline void clear_has_band3();
  inline void set_has_band4();
  inline void clear_has_band4();
  inline void set_has_band5();
  inline void clear_has_band5();
  inline void set_has_band6();
  inline void clear_has_band6();
  inline void set_has_band7();
  inline void clear_has_band7();
  inline void set_has_band8();
  inline void clear_has_band8();
  inline void set_has_band9();
  inline void clear_has_band9();
  inline void set_has_band10();
  inline void clear_has_band10();
  inline void set_has_band11();
  inline void clear_has_band11();
  inline void set_has_band12();
  inline void clear_has_band12();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::int32 signalid_;
  float fundamentalfreq_;
  float band1_;
  float band2_;
  float band3_;
  float band4_;
  float band5_;
  float band6_;
  float band7_;
  float band8_;
  float band9_;
  float band10_;
  float band11_;
  float band12_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_SignalMessages_2eproto();
  friend void protobuf_AssignDesc_SignalMessages_2eproto();
  friend void protobuf_ShutdownFile_SignalMessages_2eproto();

  void InitAsDefaultInstance();
  static LogFFT* default_instance_;
};
// -------------------------------------------------------------------

class TimeInfo : public ::google_public::protobuf::Message {
 public:
  TimeInfo();
  virtual ~TimeInfo();

  TimeInfo(const TimeInfo& from);

  inline TimeInfo& operator=(const TimeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const TimeInfo& default_instance();

  void Swap(TimeInfo* other);

  // implements Message ----------------------------------------------

  TimeInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const TimeInfo& from);
  void MergeFrom(const TimeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isPlaying = 1 [default = false];
  inline bool has_isplaying() const;
  inline void clear_isplaying();
  static const int kIsPlayingFieldNumber = 1;
  inline bool isplaying() const;
  inline void set_isplaying(bool value);

  // required float tempo = 2 [default = 0];
  inline bool has_tempo() const;
  inline void clear_tempo();
  static const int kTempoFieldNumber = 2;
  inline float tempo() const;
  inline void set_tempo(float value);

  // required float position = 3 [default = 0];
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline float position() const;
  inline void set_position(float value);

  // @@protoc_insertion_point(class_scope:TimeInfo)
 private:
  inline void set_has_isplaying();
  inline void clear_has_isplaying();
  inline void set_has_tempo();
  inline void clear_has_tempo();
  inline void set_has_position();
  inline void clear_has_position();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  bool isplaying_;
  float tempo_;
  float position_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SignalMessages_2eproto();
  friend void protobuf_AssignDesc_SignalMessages_2eproto();
  friend void protobuf_ShutdownFile_SignalMessages_2eproto();

  void InitAsDefaultInstance();
  static TimeInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// SignalLevel

// required int32 signalID = 1 [default = 1];
inline bool SignalLevel::has_signalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalLevel::set_has_signalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalLevel::clear_has_signalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalLevel::clear_signalid() {
  signalid_ = 1;
  clear_has_signalid();
}
inline ::google_public::protobuf::int32 SignalLevel::signalid() const {
  return signalid_;
}
inline void SignalLevel::set_signalid(::google_public::protobuf::int32 value) {
  set_has_signalid();
  signalid_ = value;
}

// required float signalLevel = 2 [default = 0];
inline bool SignalLevel::has_signallevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalLevel::set_has_signallevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalLevel::clear_has_signallevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalLevel::clear_signallevel() {
  signallevel_ = 0;
  clear_has_signallevel();
}
inline float SignalLevel::signallevel() const {
  return signallevel_;
}
inline void SignalLevel::set_signallevel(float value) {
  set_has_signallevel();
  signallevel_ = value;
}

// -------------------------------------------------------------------

// SignalInstantVal

// required int32 signalID = 1 [default = 1];
inline bool SignalInstantVal::has_signalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalInstantVal::set_has_signalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalInstantVal::clear_has_signalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalInstantVal::clear_signalid() {
  signalid_ = 1;
  clear_has_signalid();
}
inline ::google_public::protobuf::int32 SignalInstantVal::signalid() const {
  return signalid_;
}
inline void SignalInstantVal::set_signalid(::google_public::protobuf::int32 value) {
  set_has_signalid();
  signalid_ = value;
}

// required float signalInstantVal = 2 [default = 0];
inline bool SignalInstantVal::has_signalinstantval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalInstantVal::set_has_signalinstantval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalInstantVal::clear_has_signalinstantval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalInstantVal::clear_signalinstantval() {
  signalinstantval_ = 0;
  clear_has_signalinstantval();
}
inline float SignalInstantVal::signalinstantval() const {
  return signalinstantval_;
}
inline void SignalInstantVal::set_signalinstantval(float value) {
  set_has_signalinstantval();
  signalinstantval_ = value;
}

// -------------------------------------------------------------------

// Impulse

// required int32 signalID = 1 [default = 1];
inline bool Impulse::has_signalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Impulse::set_has_signalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Impulse::clear_has_signalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Impulse::clear_signalid() {
  signalid_ = 1;
  clear_has_signalid();
}
inline ::google_public::protobuf::int32 Impulse::signalid() const {
  return signalid_;
}
inline void Impulse::set_signalid(::google_public::protobuf::int32 value) {
  set_has_signalid();
  signalid_ = value;
}

// -------------------------------------------------------------------

// LinearFFT

// required int32 signalID = 1 [default = 1];
inline bool LinearFFT::has_signalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinearFFT::set_has_signalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinearFFT::clear_has_signalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinearFFT::clear_signalid() {
  signalid_ = 1;
  clear_has_signalid();
}
inline ::google_public::protobuf::int32 LinearFFT::signalid() const {
  return signalid_;
}
inline void LinearFFT::set_signalid(::google_public::protobuf::int32 value) {
  set_has_signalid();
  signalid_ = value;
}

// required float fundamentalFreq = 2 [default = 0];
inline bool LinearFFT::has_fundamentalfreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinearFFT::set_has_fundamentalfreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinearFFT::clear_has_fundamentalfreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinearFFT::clear_fundamentalfreq() {
  fundamentalfreq_ = 0;
  clear_has_fundamentalfreq();
}
inline float LinearFFT::fundamentalfreq() const {
  return fundamentalfreq_;
}
inline void LinearFFT::set_fundamentalfreq(float value) {
  set_has_fundamentalfreq();
  fundamentalfreq_ = value;
}

// repeated float data = 3 [packed = true];
inline int LinearFFT::data_size() const {
  return data_.size();
}
inline void LinearFFT::clear_data() {
  data_.Clear();
}
inline float LinearFFT::data(int index) const {
  return data_.Get(index);
}
inline void LinearFFT::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void LinearFFT::add_data(float value) {
  data_.Add(value);
}
inline const ::google_public::protobuf::RepeatedField< float >&
LinearFFT::data() const {
  return data_;
}
inline ::google_public::protobuf::RepeatedField< float >*
LinearFFT::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// LogFFT

// optional int32 signalID = 1 [default = 1];
inline bool LogFFT::has_signalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogFFT::set_has_signalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogFFT::clear_has_signalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogFFT::clear_signalid() {
  signalid_ = 1;
  clear_has_signalid();
}
inline ::google_public::protobuf::int32 LogFFT::signalid() const {
  return signalid_;
}
inline void LogFFT::set_signalid(::google_public::protobuf::int32 value) {
  set_has_signalid();
  signalid_ = value;
}

// optional float fundamentalFreq = 2;
inline bool LogFFT::has_fundamentalfreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogFFT::set_has_fundamentalfreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogFFT::clear_has_fundamentalfreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogFFT::clear_fundamentalfreq() {
  fundamentalfreq_ = 0;
  clear_has_fundamentalfreq();
}
inline float LogFFT::fundamentalfreq() const {
  return fundamentalfreq_;
}
inline void LogFFT::set_fundamentalfreq(float value) {
  set_has_fundamentalfreq();
  fundamentalfreq_ = value;
}

// optional float band1 = 3;
inline bool LogFFT::has_band1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogFFT::set_has_band1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogFFT::clear_has_band1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogFFT::clear_band1() {
  band1_ = 0;
  clear_has_band1();
}
inline float LogFFT::band1() const {
  return band1_;
}
inline void LogFFT::set_band1(float value) {
  set_has_band1();
  band1_ = value;
}

// optional float band2 = 4;
inline bool LogFFT::has_band2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogFFT::set_has_band2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogFFT::clear_has_band2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogFFT::clear_band2() {
  band2_ = 0;
  clear_has_band2();
}
inline float LogFFT::band2() const {
  return band2_;
}
inline void LogFFT::set_band2(float value) {
  set_has_band2();
  band2_ = value;
}

// optional float band3 = 5;
inline bool LogFFT::has_band3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogFFT::set_has_band3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogFFT::clear_has_band3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogFFT::clear_band3() {
  band3_ = 0;
  clear_has_band3();
}
inline float LogFFT::band3() const {
  return band3_;
}
inline void LogFFT::set_band3(float value) {
  set_has_band3();
  band3_ = value;
}

// optional float band4 = 6;
inline bool LogFFT::has_band4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogFFT::set_has_band4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogFFT::clear_has_band4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogFFT::clear_band4() {
  band4_ = 0;
  clear_has_band4();
}
inline float LogFFT::band4() const {
  return band4_;
}
inline void LogFFT::set_band4(float value) {
  set_has_band4();
  band4_ = value;
}

// optional float band5 = 7;
inline bool LogFFT::has_band5() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogFFT::set_has_band5() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogFFT::clear_has_band5() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogFFT::clear_band5() {
  band5_ = 0;
  clear_has_band5();
}
inline float LogFFT::band5() const {
  return band5_;
}
inline void LogFFT::set_band5(float value) {
  set_has_band5();
  band5_ = value;
}

// optional float band6 = 8;
inline bool LogFFT::has_band6() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogFFT::set_has_band6() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogFFT::clear_has_band6() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogFFT::clear_band6() {
  band6_ = 0;
  clear_has_band6();
}
inline float LogFFT::band6() const {
  return band6_;
}
inline void LogFFT::set_band6(float value) {
  set_has_band6();
  band6_ = value;
}

// optional float band7 = 9;
inline bool LogFFT::has_band7() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogFFT::set_has_band7() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogFFT::clear_has_band7() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogFFT::clear_band7() {
  band7_ = 0;
  clear_has_band7();
}
inline float LogFFT::band7() const {
  return band7_;
}
inline void LogFFT::set_band7(float value) {
  set_has_band7();
  band7_ = value;
}

// optional float band8 = 10;
inline bool LogFFT::has_band8() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogFFT::set_has_band8() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogFFT::clear_has_band8() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogFFT::clear_band8() {
  band8_ = 0;
  clear_has_band8();
}
inline float LogFFT::band8() const {
  return band8_;
}
inline void LogFFT::set_band8(float value) {
  set_has_band8();
  band8_ = value;
}

// optional float band9 = 11;
inline bool LogFFT::has_band9() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogFFT::set_has_band9() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogFFT::clear_has_band9() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogFFT::clear_band9() {
  band9_ = 0;
  clear_has_band9();
}
inline float LogFFT::band9() const {
  return band9_;
}
inline void LogFFT::set_band9(float value) {
  set_has_band9();
  band9_ = value;
}

// optional float band10 = 12;
inline bool LogFFT::has_band10() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogFFT::set_has_band10() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogFFT::clear_has_band10() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogFFT::clear_band10() {
  band10_ = 0;
  clear_has_band10();
}
inline float LogFFT::band10() const {
  return band10_;
}
inline void LogFFT::set_band10(float value) {
  set_has_band10();
  band10_ = value;
}

// optional float band11 = 13;
inline bool LogFFT::has_band11() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogFFT::set_has_band11() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogFFT::clear_has_band11() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogFFT::clear_band11() {
  band11_ = 0;
  clear_has_band11();
}
inline float LogFFT::band11() const {
  return band11_;
}
inline void LogFFT::set_band11(float value) {
  set_has_band11();
  band11_ = value;
}

// optional float band12 = 14;
inline bool LogFFT::has_band12() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogFFT::set_has_band12() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogFFT::clear_has_band12() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogFFT::clear_band12() {
  band12_ = 0;
  clear_has_band12();
}
inline float LogFFT::band12() const {
  return band12_;
}
inline void LogFFT::set_band12(float value) {
  set_has_band12();
  band12_ = value;
}

// -------------------------------------------------------------------

// TimeInfo

// required bool isPlaying = 1 [default = false];
inline bool TimeInfo::has_isplaying() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeInfo::set_has_isplaying() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeInfo::clear_has_isplaying() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeInfo::clear_isplaying() {
  isplaying_ = false;
  clear_has_isplaying();
}
inline bool TimeInfo::isplaying() const {
  return isplaying_;
}
inline void TimeInfo::set_isplaying(bool value) {
  set_has_isplaying();
  isplaying_ = value;
}

// required float tempo = 2 [default = 0];
inline bool TimeInfo::has_tempo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeInfo::set_has_tempo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeInfo::clear_has_tempo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeInfo::clear_tempo() {
  tempo_ = 0;
  clear_has_tempo();
}
inline float TimeInfo::tempo() const {
  return tempo_;
}
inline void TimeInfo::set_tempo(float value) {
  set_has_tempo();
  tempo_ = value;
}

// required float position = 3 [default = 0];
inline bool TimeInfo::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeInfo::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline float TimeInfo::position() const {
  return position_;
}
inline void TimeInfo::set_position(float value) {
  set_has_position();
  position_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google_public {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SignalMessages_2eproto__INCLUDED
