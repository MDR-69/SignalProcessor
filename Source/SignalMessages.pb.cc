// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignalMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SignalMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google_public::protobuf::Descriptor* SignalLevel_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SignalLevel_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Impulse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Impulse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SignalMessages_2eproto() {
  protobuf_AddDesc_SignalMessages_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SignalMessages.proto");
  GOOGLE_CHECK(file != NULL);
  SignalLevel_descriptor_ = file->message_type(0);
  static const int SignalLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLevel, signalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLevel, signallevel_),
  };
  SignalLevel_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SignalLevel_descriptor_,
      SignalLevel::default_instance_,
      SignalLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLevel, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalLevel));
  Impulse_descriptor_ = file->message_type(1);
  static const int Impulse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impulse, signalid_),
  };
  Impulse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Impulse_descriptor_,
      Impulse::default_instance_,
      Impulse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impulse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impulse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Impulse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SignalMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalLevel_descriptor_, &SignalLevel::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Impulse_descriptor_, &Impulse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SignalMessages_2eproto() {
  delete SignalLevel::default_instance_;
  delete SignalLevel_reflection_;
  delete Impulse::default_instance_;
  delete Impulse_reflection_;
}

void protobuf_AddDesc_SignalMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SignalMessages.proto\":\n\013SignalLevel\022\023\n"
    "\010signalID\030\001 \002(\005:\0011\022\026\n\013signalLevel\030\002 \002(\002:"
    "\0010\"\036\n\007Impulse\022\023\n\010signalID\030\001 \002(\005:\0011B\020B\016Si"
    "gnalMessages", 132);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SignalMessages.proto", &protobuf_RegisterTypes);
  SignalLevel::default_instance_ = new SignalLevel();
  Impulse::default_instance_ = new Impulse();
  SignalLevel::default_instance_->InitAsDefaultInstance();
  Impulse::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SignalMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SignalMessages_2eproto {
  StaticDescriptorInitializer_SignalMessages_2eproto() {
    protobuf_AddDesc_SignalMessages_2eproto();
  }
} static_descriptor_initializer_SignalMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SignalLevel::kSignalIDFieldNumber;
const int SignalLevel::kSignalLevelFieldNumber;
#endif  // !_MSC_VER

SignalLevel::SignalLevel()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SignalLevel::InitAsDefaultInstance() {
}

SignalLevel::SignalLevel(const SignalLevel& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalLevel::SharedCtor() {
  _cached_size_ = 0;
  signalid_ = 1;
  signallevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalLevel::~SignalLevel() {
  SharedDtor();
}

void SignalLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SignalLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalLevel_descriptor_;
}

const SignalLevel& SignalLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignalMessages_2eproto();
  return *default_instance_;
}

SignalLevel* SignalLevel::default_instance_ = NULL;

SignalLevel* SignalLevel::New() const {
  return new SignalLevel;
}

void SignalLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signalid_ = 1;
    signallevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalLevel::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 signalID = 1 [default = 1];
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalid_)));
          set_has_signalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_signalLevel;
        break;
      }

      // required float signalLevel = 2 [default = 0];
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_signalLevel:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google_public::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &signallevel_)));
          set_has_signallevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalLevel::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required int32 signalID = 1 [default = 1];
  if (has_signalid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->signalid(), output);
  }

  // required float signalLevel = 2 [default = 0];
  if (has_signallevel()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteFloat(2, this->signallevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SignalLevel::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required int32 signalID = 1 [default = 1];
  if (has_signalid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->signalid(), target);
  }

  // required float signalLevel = 2 [default = 0];
  if (has_signallevel()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->signallevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 signalID = 1 [default = 1];
    if (has_signalid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->signalid());
    }

    // required float signalLevel = 2 [default = 0];
    if (has_signallevel()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLevel::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalLevel* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SignalLevel*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalLevel::MergeFrom(const SignalLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signalid()) {
      set_signalid(from.signalid());
    }
    if (from.has_signallevel()) {
      set_signallevel(from.signallevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalLevel::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLevel::CopyFrom(const SignalLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignalLevel::Swap(SignalLevel* other) {
  if (other != this) {
    std::swap(signalid_, other->signalid_);
    std::swap(signallevel_, other->signallevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SignalLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SignalLevel_descriptor_;
  metadata.reflection = SignalLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Impulse::kSignalIDFieldNumber;
#endif  // !_MSC_VER

Impulse::Impulse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void Impulse::InitAsDefaultInstance() {
}

Impulse::Impulse(const Impulse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Impulse::SharedCtor() {
  _cached_size_ = 0;
  signalid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Impulse::~Impulse() {
  SharedDtor();
}

void Impulse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Impulse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Impulse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Impulse_descriptor_;
}

const Impulse& Impulse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SignalMessages_2eproto();
  return *default_instance_;
}

Impulse* Impulse::default_instance_ = NULL;

Impulse* Impulse::New() const {
  return new Impulse;
}

void Impulse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signalid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Impulse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 signalID = 1 [default = 1];
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalid_)));
          set_has_signalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Impulse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required int32 signalID = 1 [default = 1];
  if (has_signalid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->signalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* Impulse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required int32 signalID = 1 [default = 1];
  if (has_signalid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->signalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Impulse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 signalID = 1 [default = 1];
    if (has_signalid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->signalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Impulse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Impulse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Impulse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Impulse::MergeFrom(const Impulse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signalid()) {
      set_signalid(from.signalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Impulse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Impulse::CopyFrom(const Impulse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Impulse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Impulse::Swap(Impulse* other) {
  if (other != this) {
    std::swap(signalid_, other->signalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Impulse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Impulse_descriptor_;
  metadata.reflection = Impulse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
